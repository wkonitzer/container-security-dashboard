apiVersion: batch/v1
kind: CronJob
metadata:
  name: container-security-metrics
  namespace: monitoring
spec:
  schedule: "*/5 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: container-security-metrics
        spec:
          # Only run on nodes that have node-exporter and containerd
          # Uncomment and adjust as needed
          # nodeSelector:
          #   node-role.kubernetes.io/worker: ""
          restartPolicy: OnFailure
          automountServiceAccountToken: false
          containers:
            - name: collector
              image: ghcr.io/wkonitzer/container-security-dashboard:latest
              command:
                - /bin/sh
                - -c
                - |
                  #!/bin/sh
                  set -e
                  # Install dependencies (skip if included in image)
                  # apk add --no-cache jq trivy crane crictl
                  METRIC_FILE=/node-exporter/container-security.prom

                  echo "# HELP node_container_image_info Container image information" > $METRIC_FILE
                  echo "# TYPE node_container_image_info gauge" >> $METRIC_FILE
                  echo "# HELP node_container_image_size_bytes Size of images in bytes" >> $METRIC_FILE
                  echo "# TYPE node_container_image_size_bytes gauge" >> $METRIC_FILE
                  echo "# HELP container_cve_count Number of CVEs per container by severity" >> $METRIC_FILE
                  echo "# TYPE container_cve_count gauge" >> $METRIC_FILE

                  IMAGES=$(crictl images -o json | jq -r '.images[].repoTags[]')

                  for IMAGE in $IMAGES; do
                      VENDOR=$(crane manifest "$IMAGE" 2>/dev/null | jq -r '.annotations["org.opencontainers.image.vendor"] // "unknown"')
                      NAME=$(echo "$IMAGE" | cut -d':' -f1)
                      VERSION=$(echo "$IMAGE" | cut -d':' -f2)
                      SIZE=$(crane manifest "$IMAGE" 2>/dev/null | jq '[.layers[].size] | add // 0')

                      echo "node_container_image_info{image=\"$NAME\",version=\"$VERSION\",vendor=\"$VENDOR\"} 1" >> $METRIC_FILE
                      echo "node_container_image_size_bytes{image=\"$NAME\",version=\"$VERSION\",vendor=\"$VENDOR\"} $SIZE" >> $METRIC_FILE

                      TRIVY_OUTPUT=$(trivy image --severity CRITICAL,HIGH,MEDIUM,LOW --format json "$IMAGE" 2>/dev/null || echo "")

                      if [ -n "$TRIVY_OUTPUT" ]; then
                          CRITICAL=$(echo "$TRIVY_OUTPUT" | jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
                          HIGH=$(echo "$TRIVY_OUTPUT" | jq '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length')
                          MEDIUM=$(echo "$TRIVY_OUTPUT" | jq '[.Results[].Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length')
                          LOW=$(echo "$TRIVY_OUTPUT" | jq '[.Results[].Vulnerabilities[]? | select(.Severity == "LOW")] | length')

                          echo "container_cve_count{image=\"$NAME\",version=\"$VERSION\",severity=\"CRITICAL\"} $CRITICAL" >> $METRIC_FILE
                          echo "container_cve_count{image=\"$NAME\",version=\"$VERSION\",severity=\"HIGH\"} $HIGH" >> $METRIC_FILE
                          echo "container_cve_count{image=\"$NAME\",version=\"$VERSION\",severity=\"MEDIUM\"} $MEDIUM" >> $METRIC_FILE
                          echo "container_cve_count{image=\"$NAME\",version=\"$VERSION\",severity=\"LOW\"} $LOW" >> $METRIC_FILE
                      fi
                  done
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 1
                  memory: 1Gi
              securityContext:
                allowPrivilegeEscalation: false
                runAsNonRoot: true
                runAsUser: 65534      # nobody
                runAsGroup: 65534
                readOnlyRootFilesystem: true
                capabilities:
                  drop: ["ALL"]
              volumeMounts:
                - name: textfile-collector
                  mountPath: /node-exporter
                - name: containerd-sock
                  mountPath: /run/containerd/containerd.sock
          volumes:
            - name: textfile-collector
              hostPath:
                path: /var/lib/node_exporter/textfile_collector
                type: DirectoryOrCreate
            - name: containerd-sock
              hostPath:
                path: /run/containerd/containerd.sock
                type: Socket
