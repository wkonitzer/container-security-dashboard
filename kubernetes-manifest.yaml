apiVersion: v1
kind: ConfigMap
metadata:
  name: container-security-script
  namespace: monitoring
data:
  collector-script.sh: |
    #!/bin/bash
    #set -e

    echo "Starting..."

    for sock in \
      /run/containerd/containerd.sock \
      /run/k3s/containerd/containerd.sock \
      /run/k0s/containerd.sock; do
      if [ -S "$sock" ]; then
        crictl --runtime-endpoint "unix://$sock" images >/dev/null 2>&1
        if [ $? -eq 0 ]; then
          export CONTAINER_RUNTIME_ENDPOINT="unix://$sock"
          export IMAGE_SERVICE_ENDPOINT="unix://$sock"
          echo "Detected working CRI endpoint=$CONTAINER_RUNTIME_ENDPOINT"
          break
        fi
      fi
    done

    if [ -z "$CONTAINER_RUNTIME_ENDPOINT" ]; then
      echo "No working containerd socket found!"
      exit 1
    fi

    ARCH=$(uname -m)
    case "$ARCH" in
      x86_64) PLATFORM="linux/amd64" ;;
      aarch64) PLATFORM="linux/arm64" ;;
      *) PLATFORM="linux/amd64" ;; # fallback
    esac

    CACHE_FILE="/tmp/image-shas.json"
    TMP_CACHE="/tmp/image-shas.tmp.json"
    touch "$CACHE_FILE"
    if [ ! -s "$CACHE_FILE" ]; then echo '{}' > "$CACHE_FILE"; fi

    while true; do
      echo "$(date)"

      METRIC_FILE=/node-exporter/container-security.prom
      echo "# HELP node_container_image_info Container image information" > $METRIC_FILE
      echo "# TYPE node_container_image_info gauge" >> $METRIC_FILE
      echo "# HELP node_container_image_size_bytes Size of images in bytes" >> $METRIC_FILE
      echo "# TYPE node_container_image_size_bytes gauge" >> $METRIC_FILE
      echo "# HELP container_cve_count Number of CVEs per container by severity" >> $METRIC_FILE
      echo "# TYPE container_cve_count gauge" >> $METRIC_FILE

      echo "Getting list of images..."
      CRICTL_JSON=$(crictl images -o json 2>/dev/null)

      if echo "$CRICTL_JSON" | jq -e '.' >/dev/null 2>&1; then
        NUM_IMAGES=$(echo "$CRICTL_JSON" | jq '.images | length')
        if [ "$NUM_IMAGES" -gt 0 ]; then
          IMAGES=$(echo "$CRICTL_JSON" | jq -r '.images[]?.repoTags[]?' 2>/dev/null || true)
        else
          IMAGES=""
        fi
      else
        echo "ERROR: crictl did not return valid JSON. Aborting image scan."
        echo "DEBUG: crictl output:"
        echo "$CRICTL_JSON"        
        IMAGES=""
      fi

      if [ -z "$IMAGES" ]; then
        echo "No images found or could not connect to CRI endpoint."
      else
        for IMAGE in $IMAGES; do
          echo "Image: $IMAGE"

          DIGEST=$(crane digest "$IMAGE" 2>/dev/null)
          if [ -z "$DIGEST" ]; then
            echo "Could not fetch digest for $IMAGE, skipping."
            continue
          fi

          # Check if image:tag is in the cache, and digest matches
          CACHED_DIGEST=$(jq -r --arg img "$IMAGE" '.[$img] // empty' "$CACHE_FILE")
          if [ "$DIGEST" == "$CACHED_DIGEST" ]; then
            echo "Digest unchanged, skipping scan for $IMAGE"
            continue
          fi          

          echo "Extracting Vendor"
          VENDOR=$(crane manifest "$IMAGE" 2>/dev/null | jq -r '.annotations["org.opencontainers.image.vendor"] // "unknown"')
          NAME=$(echo "$IMAGE" | cut -d':' -f1)
          VERSION=$(echo "$IMAGE" | cut -d':' -f2)

          echo "Extracting size.."
          SIZE=$(crane manifest "$IMAGE" --platform="$PLATFORM" 2>/dev/null | jq '[.layers[].size] | add // 0' 2>/dev/null || echo 0)
          echo "node_container_image_info{image=\"$NAME\",version=\"$VERSION\",vendor=\"$VENDOR\"} 1" >> $METRIC_FILE
          echo "node_container_image_size_bytes{image=\"$NAME\",version=\"$VERSION\",vendor=\"$VENDOR\"} $SIZE" >> $METRIC_FILE

          echo "Running Trivy"
          TRIVY_OUTPUT=$(trivy image --severity CRITICAL,HIGH,MEDIUM,LOW --format json "$IMAGE" 2>/dev/null || echo "")
          if [ -n "$TRIVY_OUTPUT" ]; then
            CRITICAL=$(echo "$TRIVY_OUTPUT" | jq '[.Results[]? | .Vulnerabilities? // [] | .[]? | select(.Severity == "CRITICAL")] | length' 2>/dev/null || echo 0)
            HIGH=$(echo "$TRIVY_OUTPUT" | jq '[.Results[]? | .Vulnerabilities? // [] | .[]? | select(.Severity == "HIGH")] | length' 2>/dev/null || echo 0)
            MEDIUM=$(echo "$TRIVY_OUTPUT" | jq '[.Results[]? | .Vulnerabilities? // [] | .[]? | select(.Severity == "MEDIUM")] | length' 2>/dev/null || echo 0)
            LOW=$(echo "$TRIVY_OUTPUT" | jq '[.Results[]? | .Vulnerabilities? // [] | .[]? | select(.Severity == "LOW")] | length' 2>/dev/null || echo 0)
            echo "container_cve_count{image=\"$NAME\",version=\"$VERSION\",severity=\"CRITICAL\"} $CRITICAL" >> $METRIC_FILE
            echo "container_cve_count{image=\"$NAME\",version=\"$VERSION\",severity=\"HIGH\"} $HIGH" >> $METRIC_FILE
            echo "container_cve_count{image=\"$NAME\",version=\"$VERSION\",severity=\"MEDIUM\"} $MEDIUM" >> $METRIC_FILE
            echo "container_cve_count{image=\"$NAME\",version=\"$VERSION\",severity=\"LOW\"} $LOW" >> $METRIC_FILE
          fi

        echo "Update cache"
          jq --arg img "$IMAGE" --arg dig "$DIGEST" '.[$img]=$dig' "$CACHE_FILE" > "$TMP_CACHE" && mv "$TMP_CACHE" "$CACHE_FILE"  
        
        echo "----"  
        done
      fi  

      echo "Sleeping.."
      sleep 300
    done
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: container-security-metrics
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: container-security-metrics
  template:
    metadata:
      labels:
        app: container-security-metrics
    spec:                   
      containers:
        - name: collector
          image: ghcr.io/wkonitzer/container-security-dashboard:latest
          command:
            - /bin/bash
            - /app/collector-script.sh
          volumeMounts:
            - name: script
              mountPath: /app/collector-script.sh
              subPath: collector-script.sh
            - name: textfile-collector
              mountPath: /node-exporter
            - name: containerd-sock1
              mountPath: /run/containerd/containerd.sock
            - name: containerd-sock2
              mountPath: /run/k3s/containerd/containerd.sock
            - name: containerd-sock3
              mountPath: /run/k0s/containerd.sock 
      nodeSelector:
        kubernetes.io/os: linux                                                                    
      volumes:
        - name: script
          configMap:
            name: container-security-script
            defaultMode: 0755
        - name: textfile-collector
          hostPath:
            path: /var/lib/node_exporter/textfile_collector
            type: DirectoryOrCreate
        - name: containerd-sock1
          hostPath:
            path: /run/containerd/containerd.sock
            type: ""
        - name: containerd-sock2
          hostPath:
            path: /run/k3s/containerd/containerd.sock
            type: ""
        - name: containerd-sock3
          hostPath:
            path: /run/k0s/containerd.sock
            type: ""                        
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      tolerations:
        - operator: Exists
          effect: NoSchedule
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  revisionHistoryLimit: 10                   
