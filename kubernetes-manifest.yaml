---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chainctl
  namespace: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-name
  namespace: monitoring
data:
  CLUSTER_NAME: my-cluster-name
---
apiVersion: v1
kind: Secret
metadata:
  name: chainctl-identity
  namespace: monitoring
type: Opaque
stringData:
  CHAINCTL_IDENTITY: <id>
---  
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: container-security-critical
value: 1000000000
globalDefault: false
description: "High priority for critical DaemonSets like container-security-metrics"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: container-security-metrics
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: container-security-metrics
  template:
    metadata:
      labels:
        app: container-security-metrics
      annotations:
  #      prometheus.io/scrape: "true"
  #      prometheus.io/port:   "9100"        
    spec:
      serviceAccountName: chainctl
      priorityClassName: container-security-critical                 
      containers:
        - name: collector
          image: ghcr.io/wkonitzer/container-security-dashboard:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              sleep 1; /usr/local/bin/container-adoption-report
          env:
            - name: SLEEP_TIME
              value: "120"
  #          - name: HTTP_PORT
  #            value: "9100"
  #          - name: OPENMETRICS
  #            value: "TRUE"  
            #- name: DEBUG
            #  value: "TRUE"
            - name: MAX_AGE_HOURS
              value: "12"
            - name: CHAINCTL_IDENTITY
              valueFrom:
                secretKeyRef:
                  name: chainctl-identity
                  key: CHAINCTL_IDENTITY
            - name: CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: cluster-name
                  key: CLUSTER_NAME
            - name: HOSTNODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName            
          resources:
            requests:
              memory: "64Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "500m"            
          volumeMounts:
            - name: script
              mountPath: /app/collector-script.sh
              subPath: collector-script.sh
            - name: textfile-collector
              mountPath: /node-exporter
            - name: containerd-sock1
              mountPath: /run/containerd/containerd.sock
            - name: containerd-sock2
              mountPath: /run/k3s/containerd/containerd.sock
            - name: containerd-sock3
              mountPath: /run/k0s/containerd.sock 
            - name: oidc-token
              mountPath: /var/run/chainguard/oidc/
      nodeSelector:
        kubernetes.io/os: linux                                                                    
      volumes:
        - name: script
          configMap:
            name: container-security-script
            defaultMode: 0755
        - name: textfile-collector
          hostPath:
            path: /var/lib/node_exporter/textfile_collector
            type: DirectoryOrCreate
        - name: containerd-sock1
          hostPath:
            path: /run/containerd/containerd.sock
            type: ""
        - name: containerd-sock2
          hostPath:
            path: /run/k3s/containerd/containerd.sock
            type: ""
        - name: containerd-sock3
          hostPath:
            path: /run/k0s/containerd.sock
            type: "" 
        - name: oidc-token
          projected:
            sources:
              - serviceAccountToken:
                  path: oidc-token
                  expirationSeconds: 3600
                  audience: issuer.enforce.dev                                   
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      tolerations:
        - key: "node.kubernetes.io/disk-pressure"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node.kubernetes.io/disk-pressure"
          operator: "Exists"
          effect: "NoExecute"
        - operator: Exists
          effect: NoSchedule
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  revisionHistoryLimit: 10                   
